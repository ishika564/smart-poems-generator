{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1648795,"sourceType":"datasetVersion","datasetId":974990}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd \nimport numpy as np\n\nimport gensim\nimport os \nimport re\nfrom nltk import sent_tokenize\nfrom gensim.utils import simple_preprocess","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"base_dir='/kaggle/input/poemsdataset'\npoems_data=[]\npoems=[]\n\nfor main_cat in ['forms','topics']:\n    main_dir=os.path.join(base_dir,main_cat)\n    if os.path.isdir(main_dir):\n        for sub_cat in os.listdir(main_dir):\n            sub_dir=os.path.join(main_dir,sub_cat)\n            if os.path.isdir(sub_dir):\n                for file in os.listdir(sub_dir):\n                    if file.endswith('.txt'):\n                        filepath=os.path.join(sub_dir,file)\n                        with open(filepath, 'r', encoding='utf-8') as f:\n                            text=f.read().strip()\n                            \n                            raw_sent=sent_tokenize(text)\n                            for sent in raw_sent:\n                                poems.append(simple_preprocess(sent))\n                                \n                            if len(text.split())>=5:\n                                raw_name=file.replace('.txt','')\n                                match=re.search(r'Poemby(.+)',raw_name)\n                                author=match.group(1) if match else 'Unknown'\n                                title=raw_name.split('Poems')[1].split('Poemby')[0]\n                                poems_data.append({\n                                    'topic': sub_cat,\n                                    'title': title,\n                                    'author': author, \n                                    'poem_text': text\n                                })\n\ndf=pd.DataFrame(poems_data)\ndf_tmp=pd.DataFrame(poems)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_tmp.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"poems","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model=gensim.models.Word2Vec(\n    window=10, \n    min_count=2  \n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.build_vocab(poems)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.train(poems, total_examples=model.corpus_count, epochs=model.epochs)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.wv.most_similar('love', topn=50)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.wv.doesnt_match(['love', 'passion', 'bliss', 'gift', 'desire'])","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.wv['love']","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.wv.most_similar('true', topn=50)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.wv.similarity('true','love')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"topwords=pd.DataFrame(df['topic'])","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"topwords.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def extracting_top_words(topic):\n    words=[]\n    if topic not in model.corpus:\n        return\n    else:\n        for word in model.wv.most_similar(topic, topn=50):\n            words.append(word[0])\n    return words","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"words=extracting_top_words(topwords['topic'][0])\ntype(words)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['related_words']=df['topic'].apply(extracting_top_words)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"topwords['topic'].duplicated().sum()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"topwords=topwords.drop_duplicates()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"topwords['topic'].duplicated().sum()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Better model","metadata":{}},{"cell_type":"code","source":"from gensim.models import Word2Vec\nfrom nltk.tokenize import word_tokenize\nimport pandas as pd\nimport nltk\nnltk.download('punkt')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w2v_model=Word2Vec(\n    poems, \n    vector_size=100, \n    window=10, \n    min_count=2, \n    workers=4, \n    sg=1\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w2v_model.save(\"poems_w2v.model\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w2v_model.wv.most_similar('love', topn=50)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#storing the top words of each topic in a dataframe \ntopic_words_list=[]\nfor topic in topwords['topic'].unique():\n    if topic in w2v_model.wv:\n        try:\n            similar_words=[word for word, _ in w2v_model.wv.most_similar(topic, topn=50)]\n        except KeyError:\n            similar_words=[]\n    else:\n        similar_words=[]\n\n    topic_words_list.append({\n        'topic': topic,\n        'top_50_words': \",\".join(similar_words)\n    })\ntopwords=pd.DataFrame(topic_words_list)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"topwords.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"topwords['top_50_words'].isnull().sum()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"type(topwords['topic'])","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def get_phrases_for_word(word, df, max_phrases=10):\n    \"\"\"\n    Find sentences/phrases containing the given word in poems.\n    \"\"\"\n    phrases = []\n    \n    for text in df['poem_text']:\n        # Break poem into sentences\n        sentences = sent_tokenize(text)\n        \n        for sent in sentences:\n            # Case-insensitive word match\n            if re.search(rf'\\b{word}\\b', sent, flags=re.IGNORECASE):\n                phrases.append(sent.strip())\n    \n    # Deduplicate & limit\n    phrases = list(set(phrases))\n    random.shuffle(phrases)  # shuffle for variety\n    \n    return phrases[:max_phrases]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import random","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"user_word = \"love\"\nphrases = get_phrases_for_word(user_word, df, max_phrases=5)\n\nprint(f\"Phrases for '{user_word}':\\n\")\nfor p in phrases:\n    print(\"-\", p)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}